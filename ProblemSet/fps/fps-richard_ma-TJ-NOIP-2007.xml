<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.1" url="http://code.google.com/p/freeproblemset/">
	<generator name="HUSTOJ" url="http://code.google.com/p/hustoj/"/>
	<item>
<title><![CDATA[铺地转]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>明明家买了新房子，母亲教给他一个艰巨的任务&mdash;&mdash;设计并装修他自己的房间。明明是个勤快人，很快就在纸上画出了自己房间地砖的设计草图：</p>
<p>#--#<br />
|#-#<br />
|###<br />
|---</p>
<p>我们假想明明的房间是个m&times;n的矩阵，其中#表示没有铺地砖的地方，-表示横向的地砖，|表示纵向的地砖。我们认为在水平方向上，连续的一个或多个-是一块大的横向地砖，并且在纵向上连续的一个或多个|是一块大的纵向地砖，那么请问如果已知明明画的草图，能否快速的求出他需要多少个横向的和纵向的地砖呢？例如上图则需要3个横向地砖和1个纵向地砖。</p>
<p></p>]]></description>
<input><![CDATA[<p>每组输入数据，第一行为整数m和n，接下来的m行表示明明画的草图，只含有题目中的三种字符。</p>
<p></p>]]></input> 
<output><![CDATA[<p>对于每组数据，你都输出他所需要横向地砖和纵向地砖的数量，用空格隔开。</p>
<p></p>]]></output>
<sample_input><![CDATA[4 4
#--#
|#-#
|###
|---]]></sample_input>
<sample_output><![CDATA[3 1]]></sample_output>
<test_input><![CDATA[5 5
|#||#
|||#|
||#|#
|||#|
|#||#]]></test_input>
<test_output><![CDATA[0 9]]></test_output>
<test_input><![CDATA[5 5
-----
#---#
--#--
-#-#-
#-#-#]]></test_input>
<test_output><![CDATA[9 0]]></test_output>
<test_input><![CDATA[4 5
||-|-
|-|-|
|-||-
||--|]]></test_input>
<test_output><![CDATA[7 8]]></test_output>
<test_input><![CDATA[5 5
#####
#####
#####
#####
#####]]></test_input>
<test_output><![CDATA[0 0]]></test_output>
<test_input><![CDATA[1 10
-|###|-##-]]></test_input>
<test_output><![CDATA[3 2]]></test_output>
<test_input><![CDATA[4 5
||#|#
|#|#|
|#||#
||##|]]></test_input>
<test_output><![CDATA[0 8]]></test_output>
<test_input><![CDATA[5 4
----
#--#
-##-
-#-#
#-#-]]></test_input>
<test_output><![CDATA[8 0]]></test_output>
<test_input><![CDATA[5 5
|-||-
|||-|
||-|-
|||-|
|-||-]]></test_input>
<test_output><![CDATA[8 9]]></test_output>
<test_input><![CDATA[5 5
-----
|---|
--|--
-|-|-
|-|-|]]></test_input>
<test_output><![CDATA[9 8]]></test_output>
<test_input><![CDATA[5 4
----
|--|
-||-
-|-|
|-|-]]></test_input>
<test_output><![CDATA[8 7]]></test_output>
<hint><![CDATA[<p>【样例输入1】</p>
<p>4 4<br />
#--#<br />
|#-#<br />
|###<br />
|---</p>
<p></p>
<p>【样例输出1】</p>
<p>3 1</p>
<p>（解释：题目中已描述。）</p>
<p></p>
<p>【样例输入2】</p>
<p>2 3<br />
--|<br />
|-|</p>
<p></p>
<p>【样例输出2】</p>
<p>2 2</p>
<p></p>
<p>【数据范围】</p>
<p>所有的10组数据中，2&lt;=m, n&lt;=50</p>
<p></p>]]></hint>
<source><![CDATA[TJ-NOIP-2007]]></source>
	<solution language="C"><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main (int argc, char const* argv[])
{
    int m, n, i, j, rcnt, vcnt, flg, map[50][50];
    char buf[64];

    scanf("%d %d", &m, &n);
    for (i = 0; i < m; i++) {
        scanf("%s", buf);   
        for (j = 0; j < n; j++) {
            map[i][j] = buf[j];
        }
    }

    rcnt = 0;
    for (i = 0; i < m; i++) {
        flg = 0;
        for (j = 0; j < n; j++) {
            if ('-' == map[i][j]) {
                flg = 1;
            } else {
                if (flg == 1) {
                    rcnt++;
                    flg = 0;
                }
            }
        }

        if (flg == 1) {
            rcnt++;
        }
    }

    vcnt = 0;
    for (i = 0; i < n; i++) {
        flg = 0;
        for (j = 0; j < m; j++) {
            if ('|' == map[j][i]) {
                flg = 1;
            } else {
                if (flg == 1) {
                    vcnt++;
                    flg = 0;
                }
            }
        }

        if (flg == 1) {
            vcnt++;
        }
    }

    printf("%d %d\n", rcnt, vcnt);

    return 0;
}]]></solution>
	</item>
<item>
<title><![CDATA[统计数字]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>给定一个自然数N，统计出所有不超过N的正整数中数字0到9的出现的次数，并且依次打印出来每个数字出现的次数（0～9），用空格隔开。</p>
<p></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[10]]></sample_input>
<sample_output><![CDATA[1 2 1 1 1 1 1 1 1 1]]></sample_output>
<test_input><![CDATA[994
]]></test_input>
<test_output><![CDATA[189 300 300 300 300 299 299 299 299 289
]]></test_output>
<test_input><![CDATA[995
]]></test_input>
<test_output><![CDATA[189 300 300 300 300 300 299 299 299 291
]]></test_output>
<test_input><![CDATA[997
]]></test_input>
<test_output><![CDATA[189 300 300 300 300 300 300 300 299 295
]]></test_output>
<test_input><![CDATA[996
]]></test_input>
<test_output><![CDATA[189 300 300 300 300 300 300 299 299 293
]]></test_output>
<test_input><![CDATA[991
]]></test_input>
<test_output><![CDATA[189 300 299 299 299 299 299 299 299 283
]]></test_output>
<test_input><![CDATA[999
]]></test_input>
<test_output><![CDATA[189 300 300 300 300 300 300 300 300 300
]]></test_output>
<test_input><![CDATA[1000
]]></test_input>
<test_output><![CDATA[192 301 300 300 300 300 300 300 300 300
]]></test_output>
<test_input><![CDATA[992
]]></test_input>
<test_output><![CDATA[189 300 300 299 299 299 299 299 299 285
]]></test_output>
<test_input><![CDATA[993
]]></test_input>
<test_output><![CDATA[189 300 300 300 299 299 299 299 299 287
]]></test_output>
<test_input><![CDATA[998
]]></test_input>
<test_output><![CDATA[189 300 300 300 300 300 300 300 300 297
]]></test_output>
<hint><![CDATA[<p>【样例输入1】</p>
<p>10</p>
<p>【样例输出1】</p>
<p>1 2 1 1 1 1 1 1 1 1</p>
<p>（解释：在1到10中，只有数字1在整数1和10中重复出现了两次，其他数字都只出现了一次）</p>
<p></p>
<p>【样例输入2】</p>
<p>100</p>
<p>【样例输出2】</p>
<p>11 21 20 20 20 20 20 20 20 20</p>
<p></p>
<p>【数据范围】</p>
<p>所有10组数据中，1&lt;=N&lt;=1000</p>
<p>输出行结尾不要有多余空格。</p>
<p></p>]]></hint>
<source><![CDATA[TJ-NOIP-2007]]></source>
	<solution language="C"><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char *argv[])
{
	int n, i, j, cnt[10];
	char s[8];
	scanf("%d", &n);

	for (i=0; i<10; i++) cnt[i] = 0;

	for (i=1; i<=n; i++) {
		sprintf(s, "%d", i);
		for (j=0; j<strlen(s); j++) {
			cnt[s[j]-'0']++;
		}
	}

	for (i=0; i<10; i++) {
		printf("%d ", cnt[i]);
	}
	printf("\n");

	return 0;
}]]></solution>
	</item>
<item>
<title><![CDATA[石头剪子布]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>同学A和同学B两个人玩最简单的石头剪子布游戏，游戏规则如下：</p>
<p>石头赢剪子；<br />
剪子赢布；<br />
布赢石头；</p>
<p>如果二者相同，则平局；</p>
<p>并且规定，如果赢一局则得2分，平局的话双方各得1分，输的人不得分。</p>
<p></p>]]></description>
<input><![CDATA[<p>两个人一共玩了N局，并且已知每个人每局出的是什么，我们用字符R代表石头，S代表剪子，P代表布。并且给出两个字符串代表两个人每局的出法。</p>
<p></p>]]></input> 
<output><![CDATA[<p>输出比赛结果和胜方的得分。</p>
<p></p>]]></output>
<sample_input><![CDATA[3
RRP
RSR]]></sample_input>
<sample_output><![CDATA[A 5]]></sample_output>
<test_input><![CDATA[9
RRRSSSPPP
RSPRSPRSP]]></test_input>
<test_output><![CDATA[TIE 9]]></test_output>
<test_input><![CDATA[3
SPR
RSP]]></test_input>
<test_output><![CDATA[B 6]]></test_output>
<test_input><![CDATA[3
RRP
RSR]]></test_input>
<test_output><![CDATA[A 5]]></test_output>
<test_input><![CDATA[4
PRPR
PSPP]]></test_input>
<test_output><![CDATA[TIE 4]]></test_output>
<test_input><![CDATA[6
RSPSRP
PPSSRR]]></test_input>
<test_output><![CDATA[TIE 6]]></test_output>
<test_input><![CDATA[3
SSS
RSP]]></test_input>
<test_output><![CDATA[TIE 3]]></test_output>
<test_input><![CDATA[3
RRR
RSP]]></test_input>
<test_output><![CDATA[TIE 3]]></test_output>
<test_input><![CDATA[9
PPPRRRSSS
RSPRSPRSP]]></test_input>
<test_output><![CDATA[TIE 9]]></test_output>
<test_input><![CDATA[9
SSSPPPRRR
RSPRSPRSP]]></test_input>
<test_output><![CDATA[TIE 9]]></test_output>
<test_input><![CDATA[3
PPP
RSP]]></test_input>
<test_output><![CDATA[TIE 3]]></test_output>
<hint><![CDATA[<p>【样例输入1】</p>
<p>3<br />
RRP<br />
RSR</p>
<p>【样例输出1】</p>
<p>A 5</p>
<p>（解释：其中3为两个人玩的局数。下面两个字符串分别为同学A、B每局的出法，可见除了第一局两个人平局，其他都是A赢B，两人最后得分为5和1，所以答案为A 5）</p>
<p></p>
<p>【样例输入2】</p>
<p>4<br />
PRPR<br />
PSPP</p>
<p>【样例输出2】</p>
<p>TIE 4</p>
<p>（解释：两个人得分都是一样的，均为4分，所以是平分，则输出TIE 4。）注意：平局时TIE的三个字母必须大写，小写不给分。</p>
<p></p>
<p>【数据范围】</p>
<p>所有10组数据中，2&lt;=N&lt;=30</p>
<p></p>]]></hint>
<source><![CDATA[TJ-NOIP-2007]]></source>
	<solution language="C++"><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main (int argc, char const* argv[])
{
    int n, i, ans_a, ans_b;
    char buf_a[32], buf_b[32];

    scanf("%d", &n);
    scanf("%s", buf_a);
    scanf("%s", buf_b);

    ans_a = ans_b = 0;
    for (i = 0; i < n; i++) {
        if (buf_a[i] == buf_b[i]) {
            ans_a++;
            ans_b++;
        } else if (buf_a[i] == 'R' && buf_b[i] == 'S' ||
                buf_a[i] == 'S' && buf_b[i] == 'P' ||
                buf_a[i] == 'P' && buf_b[i] == 'R') {
            ans_a += 2;
        } else {
            ans_b += 2;
        }
    }

    if (ans_a > ans_b) {
        printf("A ");
    } else if (ans_a < ans_b) {
        printf("B ");
    } else {
        printf("TIE ");
    }

    printf("%d\n", ans_a > ans_b ? ans_a : ans_b);

    return 0;
}]]></solution>
	</item>
<item>
<title><![CDATA[幻方]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>在数学中，我们称下面这个3&times;3的矩阵为3阶幻方，是因为无论是横行、竖行、斜行他们三个数的和都是相等的，均为15。</p>
<p>8<span class="Apple-tab-span" style="white-space:pre">	</span>1<span class="Apple-tab-span" style="white-space:pre">	</span>6<br />
3<span class="Apple-tab-span" style="white-space:pre">	</span>5<span class="Apple-tab-span" style="white-space:pre">	</span>7<br />
4<span class="Apple-tab-span" style="white-space:pre">	</span>9<span class="Apple-tab-span" style="white-space:pre">	</span>2</p>
<p>我们用一行数字也可以表示唯一的一个3阶幻方，即一行接一行从左向右的表示，则上述的幻方可以表示为：8, 1, 6, 3, 5, 7, 4, 9, 2</p>
<p>现提供一个缺少某一个数字的3阶幻方，请确定这个缺少的数字是多少？</p>
<p></p>]]></description>
<input><![CDATA[<p>在输入中，缺少的数字用-1表示，所有的数字用空格隔开。例如：8 1 6 3 5 -1 4 9 2</p>
<p></p>]]></input> 
<output><![CDATA[<p>输出幻方中缺少的数字。</p>
<p></p>]]></output>
<sample_input><![CDATA[8 1 6 3 5 -1 4 9 2]]></sample_input>
<sample_output><![CDATA[7]]></sample_output>
<test_input><![CDATA[8 1 6 3 5 7 -1 9 2]]></test_input>
<test_output><![CDATA[4]]></test_output>
<test_input><![CDATA[8 1 6 3 5 -1 4 9 2]]></test_input>
<test_output><![CDATA[7]]></test_output>
<test_input><![CDATA[8 1 6 -1 5 7 4 9 2]]></test_input>
<test_output><![CDATA[3]]></test_output>
<test_input><![CDATA[8 1 6 3 -1 7 4 9 2]]></test_input>
<test_output><![CDATA[5]]></test_output>
<test_input><![CDATA[5 15 13 19 11 3 9 7 -1]]></test_input>
<test_output><![CDATA[17]]></test_output>
<test_input><![CDATA[8 -1 6 3 5 7 4 9 2]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[-1 1 6 3 5 7 4 9 2]]></test_input>
<test_output><![CDATA[8]]></test_output>
<test_input><![CDATA[8 1 6 3 5 7 4 9 -1]]></test_input>
<test_output><![CDATA[2]]></test_output>
<test_input><![CDATA[8 1 6 3 5 7 4 -1 2]]></test_input>
<test_output><![CDATA[9]]></test_output>
<test_input><![CDATA[8 1 -1 3 5 7 4 9 2]]></test_input>
<test_output><![CDATA[6]]></test_output>
<hint><![CDATA[<p>【样例输入1】</p>
<p>8 1 6 3 5 -1 4 9 2</p>
<p>【样例输出1】</p>
<p>7</p>
<p>（解释：与题目中描述的幻方相同。）</p>
<p></p>
<p>【样例输入2】</p>
<p>5 15 13 19 11 3 9 7 -1</p>
<p>【样例输出2】</p>
<p>17</p>
<p></p>
<p>【数据范围】</p>
<p>所有10组数据中，每组输入都是9个数（用空格隔开），并且其中8个数是不超过100的正整数，-1代表幻方中缺少的数。</p>
<p></p>]]></hint>
<source><![CDATA[TJ-NOIP-2007]]></source>
	<solution language="C++"><![CDATA[#include <stdio.h>
#include <stdlib.h>

int main (int argc, char const* argv[])
{
    int a[3][3];
    int i, j, sum, ans, p_y, p_x;

    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            scanf("%d", &a[i][j]);
            if (a[i][j] == -1) {
                p_y = i; p_x = j;
            }
        }
    }

    if (p_y == 0) {
        sum = a[1][0] + a[1][1] + a[1][2];
    } else {
        sum = a[0][0] + a[0][1] + a[0][2];
    }

    ans = sum - (a[p_y][0] + a[p_y][1] + a[p_y][2]) - 1;

    printf("%d\n", ans);

    return 0;
}]]></solution>
	</item>
</fps>