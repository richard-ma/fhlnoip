<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.1" url="http://code.google.com/p/freeproblemset/">
	<generator name="HUSTOJ" url="http://code.google.com/p/hustoj/"/>
	<item>
<title><![CDATA[小红帽]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>有一群喜欢带小红帽的小猫咪举行了一场别开生面的聚会，然而某些小猫咪的帽子上被涂上了大灰狼的图标，可是每只小猫咪看不到自己头上的帽子有没有被涂，它们只能看到其他猫咪头上的帽子是不是大灰狼的图案，现在告诉你每只猫咪看到的别人头上大灰狼帽子的数量，聪明的你阿，能不能判断出来一共有多少个人头上被涂了可恶的大灰狼呢，当然如果你发现有些猫咪撒谎的话，就直接输出-1吧。</p>
<p></p>]]></description>
<input><![CDATA[<p>输入数据第一行是一个正整数n，代表聚会的猫咪数(n &lt;= 100)。第二行一次读入n个数，其中的第i个数代表第i只猫咪看到的其他猫咪头上的大灰狼的个数。</p>
<p></p>]]></input> 
<output><![CDATA[<p>输出一个数&mdash;&mdash;有多少猫咪被涂了大灰狼。</p>
<p></p>]]></output>
<sample_input><![CDATA[3
1 2 1]]></sample_input>
<sample_output><![CDATA[2]]></sample_output>
<test_input><![CDATA[7
1 1 1 1 1 1 0
]]></test_input>
<test_output><![CDATA[1
]]></test_output>
<test_input><![CDATA[49
20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19
]]></test_input>
<test_output><![CDATA[20
]]></test_output>
<test_input><![CDATA[7
1 1 1 1 1 1 0
]]></test_input>
<test_output><![CDATA[1
]]></test_output>
<test_input><![CDATA[7
6 6 6 6 6 6 6
]]></test_input>
<test_output><![CDATA[7
]]></test_output>
<test_input><![CDATA[5
3 3 2 2 2
]]></test_input>
<test_output><![CDATA[3
]]></test_output>
<test_input><![CDATA[49
20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19
]]></test_input>
<test_output><![CDATA[20
]]></test_output>
<test_input><![CDATA[3
4 0 0
]]></test_input>
<test_output><![CDATA[-1
]]></test_output>
<test_input><![CDATA[9
5 5 5 5 4 4 4 4 4
]]></test_input>
<test_output><![CDATA[5
]]></test_output>
<test_input><![CDATA[5
3 3 2 2 2
]]></test_input>
<test_output><![CDATA[3
]]></test_output>
<test_input><![CDATA[5
5 5 5 5 5
]]></test_input>
<test_output><![CDATA[-1
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[TJ-NOIP-小学组-2010]]></source>
	<solution language="C"><![CDATA[#include	<stdlib.h>
#include	<stdio.h>

int
main ( int argc, char *argv[] )
{
	int n, tmp, i, sum, ans;

	scanf("%d", &n);
	sum = 0;
	for (i=0; i<n; i++) {
		scanf("%d", &tmp);
        if (tmp >= n) {
            printf("-1\n");
            return 0;
        }
		sum += tmp;
	}

	if (sum % (n-1) != 0 || sum / (n-1) > n) {
		ans = -1;
	} else {
		ans = sum / (n-1);
	}

	printf("%d\n", ans);

	return EXIT_SUCCESS;
}]]></solution>
	</item>
<item>
<title><![CDATA[水果]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>现有一筐水果，有苹果，梨和橘子（可以认为每种水果都有无限多个）。问，至少要从筐中拿出多少个水果才能保证拿出了x个苹果或者至少有y个梨或者至少有z个橘子？</p>
<p></p>]]></description>
<input><![CDATA[<p>输入数据包含三个整数：x，y，z。</p>
<p></p>]]></input> 
<output><![CDATA[<p>输出一个整数&mdash;&mdash;至少拿出多少个水果才能满足要求？</p>
<p></p>]]></output>
<sample_input><![CDATA[1 1 1]]></sample_input>
<sample_output><![CDATA[1]]></sample_output>
<test_input><![CDATA[5 3 54
]]></test_input>
<test_output><![CDATA[60
]]></test_output>
<test_input><![CDATA[28 37 92
]]></test_input>
<test_output><![CDATA[155
]]></test_output>
<test_input><![CDATA[82 28 62
]]></test_input>
<test_output><![CDATA[170
]]></test_output>
<test_input><![CDATA[92 96 43
]]></test_input>
<test_output><![CDATA[229
]]></test_output>
<test_input><![CDATA[42 68 35
]]></test_input>
<test_output><![CDATA[143
]]></test_output>
<test_input><![CDATA[79 59 63
]]></test_input>
<test_output><![CDATA[199
]]></test_output>
<test_input><![CDATA[1 70 25
]]></test_input>
<test_output><![CDATA[94
]]></test_output>
<test_input><![CDATA[17 19 96
]]></test_input>
<test_output><![CDATA[130
]]></test_output>
<test_input><![CDATA[93 83 22
]]></test_input>
<test_output><![CDATA[196
]]></test_output>
<test_input><![CDATA[65 6 46
]]></test_input>
<test_output><![CDATA[115
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[TJ-NOIP-小学组-2010]]></source>
	<solution language="C"><![CDATA[#include	<stdlib.h>
#include	<stdio.h>

int
main ( int argc, char *argv[] )
{
	int tmp, ans, i;

	ans = 0;
	for (i=0; i<3; i++) {
		scanf("%d", &tmp);
		tmp--;
		ans += tmp; 
	}
	ans++;

	printf("%d\n", ans);

	return EXIT_SUCCESS;
}]]></solution>
	</item>
<item>
<title><![CDATA[纸带]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>小明在美术课上给马上要过生日的妈妈做了张贺卡，为了装饰这张贺卡，小明买了一条彩带，但是彩带上并不是所有颜色小明都喜欢，于是小明决定裁剪这条彩带，以取得最好的装饰效果。现已知彩带由n中不同颜色顺次相接而成，而每种颜色的装饰效果用一个整数表示，彩带上各个颜色的装饰效果为整数（包括正整数，0，或负整数），从左到右依次为a1，a2...an，小明可以从中裁剪出连续的一段用来装饰贺卡，而装饰效果就是这一段上各个颜色装饰效果的总和，当然，如果所有颜色的装饰效果都只能起到负面的作用（即ai &lt; 0），小明也可以放弃用彩带来装饰贺卡（获得的装饰效果为0）。</p>
<p></p>]]></description>
<input><![CDATA[<p>输入数据包括两行：第一行是一个整数n，表示彩带上颜色的个数，第二行有n个整数，它们依次为a1，a2...an。</p>
<p></p>]]></input> 
<output><![CDATA[<p>输出数据只有一个一行，表示贺卡最多能获得多少装饰效果。</p>
<p></p>]]></output>
<sample_input><![CDATA[5
-1 2 -1 2 -1]]></sample_input>
<sample_output><![CDATA[3]]></sample_output>
<test_input><![CDATA[100
-43 -3 -12 -36 -75 -7 -79 -54 -44 29 -58 1 16 51 -22 52 66 -39 53 50 4 -85 82 -91 54 -29 -40 87 47 -20 51 32 2 66 94 92 17 81 57 76 100 -80 -62 70 -41 86 61 87 -23 16 49 -35 -49 -52 30 82 78 32 54 83 -73 51 -83 63 -72 -85 53 -82 52 10 43 -65 46 38 -72 -64 -79 -22 29 75 -2 32 -76 -42 81 -14 -95 1 16 50 -95 85 -24 -13 10 80 24 -7 45 33]]></test_input>
<test_output><![CDATA[1291
]]></test_output>
<test_input><![CDATA[100
-64 -21 -72 -25 53 37 -95 82 -82 76 30 -75 32 12 69 89 33 -29 -71 -98 29 84 26 78 28 -4 -98 -1 42 59 57 32 -23 -95 -26 24 23 16 44 52 56 -90 91 -33 -29 73 55 -93 -88 -42 73 43 4 13 41 57 43 96 -100 77 -39 -30 -43 -82 59 -93 35 -98 34 16 37 68 39 21 62 -90 -43 6 47 68 -38 -91 -66 -30 -65 95 100 -15 -25 -71 -1 -53 15 -60 73 -27 -4 74 -24 -19]]></test_input>
<test_output><![CDATA[685
]]></test_output>
<test_input><![CDATA[100
-15 10 55 -45 7 16 -13 -62 -32 90 79 -21 76 -88 36 15 69 -77 97 11 -51 -4 -82 -44 -88 67 -50 42 37 31 100 -39 -8 19 2 -80 100 -75 -66 -20 -87 -68 -98 -56 -51 -12 40 -74 -18 17 -20 15 -56 87 46 72 -15 55 -45 -19 33 58 -87 23 -86 -63 87 98 6 17 66 34 -90 -86 29 -23 84 -55 29 -16 -57 -99 -82 -30 -70 -98 -88 0 -99 70 -3 79 -32 -12 23 -26 19 96 45 64]]></test_input>
<test_output><![CDATA[367
]]></test_output>
<test_input><![CDATA[100
-42 -81 72 -24 -95 -75 -33 -82 80 -80 -52 -87 -58 -50 -62 -45 16 48 70 61 47 -75 -36 -9 24 43 -80 95 29 -93 -8 -3 -39 13 -55 -17 -92 -87 3 37 89 17 29 -52 9 8 57 62 72 96 -58 -96 30 -87 -46 1 -82 11 -16 -9 92 56 51 -85 -68 58 -30 -38 -46 -97 28 22 2 -91 9 43 27 -12 86 7 94 -22 67 87 -79 -12 51 -2 -80 49 95 -29 7 78 -83 35 -48 -26 -88 -68]]></test_input>
<test_output><![CDATA[464
]]></test_output>
<test_input><![CDATA[100
-59 76 3 69 -26 -54 -79 -88 -72 43 -23 -95 66 44 12 -11 81 -17 -97 -91 -70 32 -17 53 -9 21 35 -77 -80 97 -80 -82 -2 -19 -40 -87 40 69 51 -55 61 -7 67 83 86 -59 -34 -27 13 -66 -80 7 0 95 38 96 -20 -7 93 75 -45 -80 -20 -67 -13 57 96 -2 69 36 10 -13 -89 -4 -51 -26 32 47 -28 31 32 61 65 -45 -37 82 42 40 -38 78 -40 -22 4 -33 10 -69 -62 -28 -85 -41]]></test_input>
<test_output><![CDATA[739
]]></test_output>
<test_input><![CDATA[100
-62 79 -59 65 -2 -77 -63 100 -15 53 94 54 -85 -53 15 40 80 84 -22 -28 72 80 69 -44 -89 -25 92 86 -22 -2 25 -95 -8 -5 -30 -78 71 5 -54 -69 -92 -41 0 10 19 61 17 75 -39 -46 22 -79 52 56 -73 34 -69 -38 82 -8 21 -58 26 -91 73 -61 -29 59 72 -29 40 35 54 -32 -50 -41 88 -2 -1 36 73 -85 35 41 80 42 78 33 -38 -66 54 -30 -25 -61 84 79 49 44 94 4]]></test_input>
<test_output><![CDATA[834
]]></test_output>
<test_input><![CDATA[100
-91 61 -84 11 92 -19 8 -5 16 -25 97 -98 91 78 -61 -100 -56 -4 -28 -70 -33 -76 16 44 -56 -56 38 -3 -89 93 -86 45 -43 -84 -3 -87 53 -59 18 -19 81 -74 -85 32 -29 -35 -51 10 1 -4 91 -78 70 66 32 -77 -4 -71 -31 -53 24 28 -13 -65 -59 -49 -42 -79 85 -71 -60 -17 28 66 74 2 -88 -16 71 63 -60 11 -47 90 -13 100 -34 70 -63 -35 10 -81 26 72 19 -91 -61 85 0 -33]]></test_input>
<test_output><![CDATA[317
]]></test_output>
<test_input><![CDATA[100
48 -76 -24 86 22 -91 76 -11 -88 -27 -41 59 14 7 -48 -46 -64 33 73 31 23 88 -35 62 -41 9 43 79 5 -97 -54 12 40 -39 8 44 -87 26 -42 -73 2 34 -58 35 -67 77 -61 -76 -38 43 43 45 -95 -93 63 -49 39 -33 -78 9 -75 -29 -75 70 59 85 -42 -58 -93 47 84 59 -23 12 15 -43 -72 -41 -45 65 -54 -24 -35 -34 -23 54 -77 -76 -92 22 -72 52 8 86 -7 -30 -37 31 -34 89]]></test_input>
<test_output><![CDATA[370
]]></test_output>
<test_input><![CDATA[100
14 -20 46 -34 10 -97 -96 2 69 -30 -76 43 -3 -57 20 -19 -98 64 -15 21 -46 -53 -63 -51 -8 -32 -25 -74 -65 -76 -38 -59 -61 48 25 34 -57 8 -57 -28 24 -36 -21 44 -17 57 -37 97 -39 65 -85 -81 -83 -15 81 49 11 26 40 53 53 -99 -25 66 93 -58 -66 27 -61 2 10 86 39 -74 23 -73 -78 52 73 86 48 -31 -44 93 75 9 -45 76 -88 75 31 -65 -95 89 -56 -42 -4 76 -72 44]]></test_input>
<test_output><![CDATA[535
]]></test_output>
<test_input><![CDATA[100
-23 74 57 50 19 3 -83 -33 -96 -35 96 71 -90 35 -41 62 99 -33 -96 -33 -63 51 68 -15 93 -20 -19 15 46 -75 67 -99 94 -94 -76 -57 61 69 58 -98 -8 -66 -70 54 8 55 -77 -59 -8 -82 81 -39 29 -57 -21 24 -19 22 -6 51 8 49 18 -86 85 52 62 8 68 25 -76 64 22 47 21 -28 -48 -17 58 49 -6 -44 -31 55 52 -93 46 93 -32 -4 89 46 -49 -41 75 31 -50 57 -19 37]]></test_input>
<test_output><![CDATA[665
]]></test_output>
<hint><![CDATA[<p>数据范围：1 &lt;= n &lt;=100, -100 &lt;= ai &lt;= 100。</p>
<p></p>]]></hint>
<source><![CDATA[TJ-NOIP-小学组-2010]]></source>
	<solution language="C"><![CDATA[#include	<stdlib.h>
#include	<stdio.h>

int
main ( int argc, char *argv[] )
{
	int n, i, j, k, max, a[100], sum;

	scanf("%d", &n);
	for (i=0; i<n; i++) {
		scanf("%d", &a[i]);
	}

	max = a[0];
	for (i=1; i<=n; i++) {
		for (j=0; j<n-i+1; j++) {
			sum = 0;
			for (k=j; k<j+i; k++) {
				sum += a[k];
			}
			if (sum > max) {
				max = sum;
			}
		}
	}

	if (max < 0) max = 0;

	printf("%d\n", max);

	return EXIT_SUCCESS;
}]]></solution>
	</item>
<item>
<title><![CDATA[地震]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>一座地震频发的山上有N个村庄，编号分别为1至N。某些村庄之间有山路相连，每条山路都有一个防震等级。假如一条路的防震等级是k（k&gt;0），就表示如果发生k级或者小于k级的地震，这条山路是安然无恙的，如果发生大于k级的地震，这条路就会被破坏，不能通过了。</p>
<p>现在邮递员小明要从村庄1出发去村庄N，他想知道最高发生几级地震的情况下，他仍然能顺利到达目的地。</p>
<p></p>]]></description>
<input><![CDATA[<p>输入数据的第一行是用空格隔开的两个整数N和M，分别表示村庄数和山路数（2 &lt;= N &lt;= 50, 1 &lt;= M &lt;= 200）。接下来有M行，每行包括三个整数u，v，w，表示村庄u和村庄v之间有一条防震等级为w的路（1 &lt;= u, v &lt;= N, 1 &lt;= w &lt;= 20）。路是双向的，在没有被破坏的情况下，既可以从u到达v，也可以从v到达u。两个村庄之间最多有一条路。输入数据保证在没有发生地震的时候可以从村庄1到达村庄N。</p>
<p></p>]]></input> 
<output><![CDATA[<p>输出只有一行，包含一个整数，表示最高发生几级地震的情况下仍然能到达村庄N。</p>
<p></p>]]></output>
<sample_input><![CDATA[4 5
1 2 3
1 3 5
2 4 10
3 4 6
1 4 1]]></sample_input>
<sample_output><![CDATA[5]]></sample_output>
<test_input><![CDATA[50 60
14 48 2
7 35 17
15 17 3
17 14 4
5 22 15
13 12 14
8 29 11
14 5 18
44 46 6
24 37 8
23 36 13
27 39 9
40 1 9
19 1 20
31 25 16
2 27 8
11 34 12
30 6 13
9 30 17
5 10 10
3 21 14
4 44 1
32 37 6
2 28 3
1 38 14
49 13 1
37 20 17
50 10 18
15 33 8
27 11 1
2 44 11
30 31 16
42 6 13
28 13 6
9 44 5
26 32 3
35 49 8
18 24 12
45 29 20
27 1 10
49 43 13
16 29 13
47 8 9
49 47 12
36 14 9
13 16 3
45 15 9
21 7 1
21 49 18
32 38 20
20 8 12
21 1 18
43 46 16
23 22 20
1 42 11
25 22 18
39 11 5
43 12 15
36 21 17
19 32 9
]]></test_input>
<test_output><![CDATA[10
]]></test_output>
<test_input><![CDATA[50 175
7 36 11
32 16 19
30 2 5
28 37 8
15 21 9
8 41 18
43 24 8
44 45 6
20 41 9
25 48 14
45 19 16
23 14 11
45 29 19
11 48 17
45 8 15
23 43 13
6 45 9
2 42 3
39 41 2
29 28 14
34 26 7
49 8 4
26 27 18
33 36 14
21 31 18
45 33 1
1 34 2
30 14 9
37 35 20
42 44 20
12 31 14
32 27 18
9 21 14
48 43 12
30 8 5
32 20 6
24 10 13
11 6 10
47 40 6
45 10 12
48 37 6
30 22 11
5 36 11
37 50 2
45 46 20
28 5 18
29 34 1
9 35 17
48 27 18
41 36 9
20 14 5
15 30 9
9 45 8
49 30 19
34 27 18
7 34 12
48 41 7
26 19 17
28 22 7
23 29 7
17 42 9
7 8 16
23 34 17
40 35 10
43 32 11
19 10 10
25 17 16
27 40 9
3 33 8
11 44 14
50 35 2
11 13 1
17 6 9
23 36 3
3 2 2
34 24 8
19 48 13
5 4 13
18 8 16
4 15 13
13 14 4
12 5 9
44 15 3
12 48 8
15 46 6
9 14 18
10 48 7
16 27 14
43 39 15
31 30 20
36 9 5
20 16 18
46 25 12
9 50 12
44 33 11
34 33 2
33 4 13
23 33 19
18 40 7
35 22 9
33 19 16
17 18 11
13 27 15
35 39 11
6 24 15
17 9 4
38 39 1
19 31 18
1 35 7
37 10 10
20 43 10
18 43 12
24 4 19
27 14 10
40 32 9
23 5 7
7 27 2
4 12 15
8 25 20
22 24 4
5 1 6
9 43 11
32 50 3
1 50 19
33 50 10
8 2 20
33 12 15
23 42 9
18 29 19
5 7 12
48 9 14
20 27 12
12 15 20
19 12 20
1 20 3
2 34 18
2 13 18
47 44 12
38 17 13
24 41 11
47 25 19
8 1 17
8 21 20
43 2 14
31 39 3
22 10 9
10 16 14
39 46 17
14 5 19
9 31 16
28 21 3
35 33 14
9 22 5
45 28 2
11 19 18
32 38 12
10 38 5
43 8 6
16 34 13
31 4 19
10 4 16
16 18 19
35 19 6
2 45 17
14 38 4
20 40 7
41 1 3
1 43 18
35 27 7
40 17 19
13 10 9
50 49 18
46 41 11
28 36 5
7 39 3
]]></test_input>
<test_output><![CDATA[19
]]></test_output>
<test_input><![CDATA[50 71
16 17 15
50 25 15
28 26 10
10 11 2
20 37 17
38 48 11
5 11 14
43 7 15
37 5 11
35 39 20
21 31 20
32 49 9
11 33 4
1 4 6
17 18 2
44 15 4
12 3 11
30 14 15
26 25 17
18 12 12
31 15 3
16 39 17
1 3 4
8 42 3
16 26 18
19 21 20
25 22 20
34 31 8
9 19 10
10 29 1
7 37 18
17 42 15
20 7 7
19 7 18
17 34 11
47 26 6
48 5 9
14 26 17
36 44 15
19 47 16
44 8 5
17 33 8
23 49 15
19 33 1
27 40 13
21 39 10
36 25 5
5 19 11
20 22 8
42 1 13
10 3 5
17 46 5
5 50 17
30 49 17
14 29 19
25 32 10
18 24 9
16 48 11
48 2 11
13 34 9
6 41 8
32 50 14
11 37 17
41 19 3
18 3 9
44 35 13
27 22 13
6 29 8
10 20 17
46 49 9
46 23 17
]]></test_input>
<test_output><![CDATA[13
]]></test_output>
<test_input><![CDATA[50 126
7 43 10
7 21 2
25 36 17
46 15 9
31 5 12
11 42 8
32 23 3
39 19 16
21 4 15
48 45 17
36 48 19
16 1 18
14 21 8
37 10 4
10 46 5
1 22 15
6 42 5
22 28 8
1 7 17
3 39 18
11 26 4
45 37 7
44 38 17
18 33 16
43 36 12
7 26 10
48 21 20
31 7 6
1 42 17
25 31 7
50 42 9
8 37 19
25 16 6
11 28 4
12 50 17
32 9 18
5 38 18
32 44 13
22 8 1
39 21 9
34 30 8
6 50 4
29 21 12
8 17 15
40 46 5
29 47 11
24 11 15
13 12 10
43 25 2
20 40 14
41 45 2
23 42 4
47 17 6
29 19 10
35 9 3
6 3 15
50 38 13
28 49 6
15 36 5
21 15 15
12 37 11
43 8 3
37 39 16
35 37 1
27 39 10
3 22 18
30 1 4
33 6 18
45 26 12
43 48 1
43 12 3
30 50 12
44 14 13
3 31 6
10 34 7
13 42 9
5 32 11
14 25 11
19 26 18
17 14 19
46 49 17
11 39 15
43 16 3
46 21 13
17 11 4
19 20 7
47 18 7
30 24 3
42 35 2
36 29 18
47 50 9
38 2 17
45 46 17
48 19 4
30 33 8
3 43 17
9 36 15
13 44 18
12 10 6
37 27 8
47 49 17
49 29 12
44 40 1
21 22 12
41 14 6
25 50 6
35 30 16
1 26 1
17 49 10
25 12 15
49 10 13
27 42 4
47 39 20
36 42 14
47 36 17
7 38 19
45 10 15
38 39 6
19 1 16
39 13 9
11 12 15
29 44 1
19 46 1
12 42 11
20 8 7
44 34 5
]]></test_input>
<test_output><![CDATA[15
]]></test_output>
<test_input><![CDATA[4 3
1 2 11
2 3 10
3 4 12
]]></test_input>
<test_output><![CDATA[10
]]></test_output>
<test_input><![CDATA[10 13
4 6 16
3 9 18
6 1 6
2 3 17
5 1 8
4 7 2
7 10 16
2 5 11
5 8 8
7 6 7
8 2 20
6 2 13
9 6 6
]]></test_input>
<test_output><![CDATA[7
]]></test_output>
<test_input><![CDATA[10 20
8 2 19
10 1 11
3 1 16
4 3 16
2 9 20
7 6 17
6 10 20
9 5 12
5 7 14
7 8 7
7 9 1
10 8 7
4 6 1
6 3 7
6 1 6
8 6 2
5 4 13
2 4 7
9 1 13
5 10 3
]]></test_input>
<test_output><![CDATA[13
]]></test_output>
<test_input><![CDATA[50 181
3 19 13
6 32 14
6 9 19
28 17 1
16 31 1
8 19 2
19 40 19
29 18 12
17 13 1
12 10 17
19 44 10
26 2 3
20 16 16
46 31 19
9 23 16
17 12 6
34 15 6
4 40 6
48 21 19
14 31 3
1 37 13
31 34 7
50 19 15
30 34 1
40 48 7
22 13 17
48 37 16
19 18 11
36 11 8
43 10 18
5 39 9
4 42 14
46 34 2
4 24 17
18 26 9
50 37 14
30 23 8
6 50 12
31 24 16
38 20 15
39 24 4
38 9 3
32 26 3
29 42 16
29 10 11
31 43 14
5 8 14
9 45 9
31 15 7
45 21 10
8 31 15
19 32 5
43 47 20
6 49 9
25 28 16
43 36 12
18 9 9
3 26 6
12 14 16
9 12 19
16 24 15
26 38 12
20 32 5
16 6 16
22 46 7
7 3 1
21 33 12
14 17 17
6 11 10
35 5 15
26 19 4
4 11 7
17 41 14
36 30 18
19 21 1
41 34 18
15 47 9
48 3 1
48 18 9
38 5 11
26 27 6
40 27 3
12 21 11
15 49 11
25 39 15
47 10 9
13 38 8
34 44 9
24 44 8
10 20 19
39 40 5
46 29 6
12 28 11
10 38 15
24 5 7
39 17 8
33 2 17
10 36 2
21 50 17
21 44 16
50 48 7
18 17 1
16 29 10
23 19 7
2 40 1
12 46 14
6 38 3
8 30 8
46 8 4
37 11 20
3 14 18
9 17 16
44 46 18
43 27 16
25 42 13
27 12 2
12 39 13
36 25 14
10 16 13
23 43 19
47 17 6
26 6 17
45 35 12
47 23 20
3 5 7
11 3 13
8 43 18
7 36 16
12 38 17
2 32 3
44 36 2
25 49 16
39 10 10
27 10 11
8 22 8
21 8 20
39 23 19
45 8 5
23 22 18
36 4 13
36 37 17
26 41 12
16 2 19
12 22 10
33 43 18
8 38 16
30 10 14
26 36 19
40 21 1
3 37 19
27 21 13
2 19 20
17 45 12
9 11 2
22 49 3
33 3 9
3 16 16
8 18 16
8 15 5
16 28 14
16 36 5
39 3 17
37 27 15
17 36 12
1 35 1
31 27 12
18 11 3
44 11 1
44 9 3
37 41 17
31 47 2
11 50 10
29 11 16
37 31 12
3 41 12
43 24 3
6 1 2
47 40 12
1 29 16
48 10 17
45 36 5
]]></test_input>
<test_output><![CDATA[16
]]></test_output>
<test_input><![CDATA[50 153
2 31 15
26 42 2
34 26 3
44 2 2
46 40 11
9 38 8
40 27 15
34 35 13
42 19 15
10 33 5
25 10 3
7 12 2
20 10 19
8 20 13
28 17 12
37 47 19
46 13 5
5 9 10
6 44 5
42 43 16
43 14 4
9 43 8
45 1 12
15 48 5
42 3 2
21 1 14
28 15 18
27 32 19
33 14 8
42 13 12
26 9 18
23 39 5
22 8 11
6 29 20
38 43 13
24 50 13
1 37 20
31 9 12
17 25 18
28 42 7
17 23 16
44 24 8
19 5 19
28 36 13
26 38 19
50 34 10
24 35 18
18 32 19
9 37 9
9 16 14
38 16 9
47 18 14
1 2 6
32 24 8
30 47 20
28 33 6
47 3 15
12 9 10
4 18 13
13 15 5
15 35 20
12 46 11
35 48 3
21 3 6
12 19 9
40 37 19
17 18 2
35 27 7
36 49 9
50 39 2
44 3 18
41 10 8
50 47 3
45 32 2
19 43 5
4 23 14
36 15 13
38 34 9
13 16 8
15 21 3
43 40 14
18 1 14
2 34 9
15 29 19
7 50 20
33 35 4
10 44 8
25 35 6
2 48 6
28 44 17
39 42 19
48 20 8
1 33 12
10 49 15
28 43 11
21 24 15
39 20 12
31 7 10
38 45 2
47 4 16
20 24 5
6 5 4
39 29 7
19 40 7
28 6 3
29 48 11
44 33 1
38 1 1
4 48 15
46 1 16
37 6 14
10 23 14
5 21 13
22 45 7
6 2 7
1 32 18
38 39 2
15 7 14
32 10 4
18 21 14
9 8 13
44 36 10
35 20 11
30 25 20
24 2 17
1 48 1
31 10 10
18 36 19
36 9 1
24 47 20
25 2 8
12 32 9
18 40 5
9 42 2
14 45 12
6 24 14
37 48 10
47 14 11
21 7 14
42 14 13
40 11 17
32 43 3
13 19 19
5 24 1
8 45 16
18 27 15
38 42 20
33 48 6
21 38 11
21 35 13
15 47 8
18 28 14
33 39 11
]]></test_input>
<test_output><![CDATA[14
]]></test_output>
<test_input><![CDATA[50 89
13 22 19
13 39 11
46 16 11
49 31 13
30 23 3
26 23 11
44 14 19
49 12 9
13 40 14
39 10 11
41 10 3
16 10 2
8 49 2
6 23 2
19 46 15
28 5 5
20 38 6
32 14 11
10 22 1
1 14 13
38 8 1
35 47 7
46 28 13
15 3 6
24 29 2
47 28 9
2 47 2
27 23 11
1 50 15
50 6 12
47 44 8
17 4 6
37 15 1
41 13 6
35 11 19
43 47 19
46 42 13
39 21 10
31 14 20
46 27 19
40 32 14
47 31 10
33 46 5
18 10 5
35 39 17
45 23 10
35 5 20
18 45 14
32 5 15
21 38 5
25 18 13
36 29 8
44 4 3
16 22 18
28 34 12
37 4 12
10 27 11
4 35 2
38 13 9
6 19 10
15 44 1
22 35 3
4 28 5
8 19 12
1 44 6
24 48 18
39 18 8
8 29 13
47 25 13
48 43 13
1 35 11
7 6 19
6 37 9
42 18 20
2 5 19
30 26 11
30 31 13
12 5 12
10 3 2
35 34 14
30 15 7
41 44 17
31 27 20
31 28 4
17 15 18
19 16 17
49 33 8
50 45 19
3 21 1
]]></test_input>
<test_output><![CDATA[15
]]></test_output>
<hint><![CDATA[<p>在发生5级地震的情况下，小明可以通过1-&gt;3-&gt;4这条路到达村庄4，但如果发生6级地震就不能到达了。</p>
<p></p>]]></hint>
<source><![CDATA[TJ-NOIP-小学组-2010]]></source>
	<solution language="C"><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAXN 64
#define INF 1000000000
int mp[MAXN][MAXN], vis[MAXN], q[MAXN];
int n;

int check(int ans) {
	int qh, qt, i;
	memset(vis, 0, sizeof(vis));
	vis[0] = 1;
	q[0] = 0;
	for (qh = 0, qt = 1 ; qh < qt ; ++qh) {
		if (q[qh] == n - 1) return 1;
		for (i = 0 ; i < n ; i++) {
			if (!vis[i] && mp[q[qh]][i] < INF && ans <= mp[q[qh]][i]) {
				vis[i] = 1;
				q[qt++] = i;
			}
		}
	}
	return 0;
}

int main() {
	int m;
	int u, v, w;
	memset(mp, 0x3f, sizeof(mp));
	scanf("%d%d",&n,&m);
	while (m--) {
		scanf("%d%d%d",&u,&v,&w);
		--u; --v;
		mp[u][v] = mp[v][u] = w;
	}
	int ans;
	for (ans = 0 ; ; ++ans) {
		//printf("ans:%d\n",ans);
		if (!check(ans)) break;
	}
	printf("%d\n",ans-1);
	return 0;
}]]></solution>
	</item>
</fps>