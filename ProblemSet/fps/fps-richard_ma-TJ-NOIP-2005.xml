<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.1" url="http://code.google.com/p/freeproblemset/">
	<generator name="HUSTOJ" url="http://code.google.com/p/hustoj/"/>
	<item>
<title><![CDATA[不高兴的津津]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>将要升入七年级的津津，希望按照每天8小时的学习时间，其他时间让他接触自己有兴趣的活动。</p>
<p>对于家长为他安排的校外学习，超过了8小时他是不高兴的。</p>
<p>对于给出的下一周(7天)每天上午、下午、晚上三个学习时间（正整数）安排，找出津津哪一天不高兴（周一用1表示、周二用2表示、周三用3表示.......周六用6表示,周日用7表示)。当&quot;不高兴的一天&quot;一样&quot;时则输出最靠前的一天。当一周没有&ldquo;不高兴&rdquo;的一天则输出0。</p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[4 3 1
4 2 1
4 3 2
4 3 1
4 3 2
3 3 1
2 2 1
]]></sample_input>
<sample_output><![CDATA[3
]]></sample_output>
<test_input><![CDATA[4 3 1
4 2 1
4 3 1
4 3 0
3 3 1
2 2 1
4 3 2]]></test_input>
<test_output><![CDATA[7]]></test_output>
<test_input><![CDATA[4 3 1
4 2 1
4 3 1
4 3 0
3 3 1
4 3 2
2 2 1]]></test_input>
<test_output><![CDATA[6]]></test_output>
<test_input><![CDATA[4 3 1
4 2 1
4 3 1
4 3 2
4 3 0
3 3 1
2 2 1]]></test_input>
<test_output><![CDATA[4]]></test_output>
<test_input><![CDATA[4 3 1
4 2 1
4 3 1
4 3 0
4 3 2
3 3 1
2 2 1]]></test_input>
<test_output><![CDATA[5]]></test_output>
<test_input><![CDATA[0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0
0 0 0]]></test_input>
<test_output><![CDATA[0]]></test_output>
<test_input><![CDATA[4 3 1
4 3 2
4 2 1
4 3 1
4 3 0
3 3 1
2 2 1]]></test_input>
<test_output><![CDATA[2]]></test_output>
<test_input><![CDATA[4 3 2
4 3 1
4 2 1
4 3 1
4 3 0
3 3 1
2 2 1]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[4 3 1
4 3 1
4 3 1
4 3 1
4 3 1
4 3 1
4 3 1]]></test_input>
<test_output><![CDATA[0]]></test_output>
<test_input><![CDATA[4 3 1
4 2 1
4 3 2
4 3 2
4 3 0
3 3 1
2 2 1]]></test_input>
<test_output><![CDATA[3]]></test_output>
<test_input><![CDATA[4 3 1
4 2 1
4 3 2
4 3 1
4 3 0
3 3 1
2 2 1]]></test_input>
<test_output><![CDATA[3]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[TJ-NOIP-2005]]></source>
	<solution language="C"><![CDATA[#include <stdio.h>
#include <stdlib.h>

int main (int argc, char const* argv[])
{
    int a1, a2, a3, print_flg, i, sum;

    print_flg = 0;
    for (i = 0; i < 7; i++) {
        scanf("%d %d %d", &a1, &a2, &a3);
        sum = a1 + a2 + a3;

        if (sum > 8) {
            printf("%d\n", i+1);
            print_flg = 1;
            break;
        }
    }

    if (!print_flg) {
        printf("0\n");
    }

    return 0;
}]]></solution>
	</item>
<item>
<title><![CDATA[城市的道路]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p></p>
<div>某城市的道路呈整齐的方格网状，东西走向的道路为M条，南北走向的道路为N条，某人住在城市的西南角A处，每天骑自行车到东北角的B处上班。为了顺便观光市容，他经常改变行车路线，他的原则是每次行车只能向北或向东，总是朝着单位的方向，最后一定到达单位。这样从A点到B点有多少种走法?</div>
<div></div>
<div>由键盘输入M和N的值(1&lt;M,N&lt;=20,且为整数),在屏幕上输出显示走法总数.</div>
<div></div>
<div>例如：左图为东西向有5条，南北向有9条路，从A点(西南角)走向B点(东北角)共有495种走法。</div>
<p></p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[5 9
]]></sample_input>
<sample_output><![CDATA[495
]]></sample_output>
<test_input><![CDATA[10 5]]></test_input>
<test_output><![CDATA[715]]></test_output>
<test_input><![CDATA[5 10]]></test_input>
<test_output><![CDATA[715]]></test_output>
<test_input><![CDATA[1 20]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[20 1]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[2 2]]></test_input>
<test_output><![CDATA[2]]></test_output>
<test_input><![CDATA[10 20]]></test_input>
<test_output><![CDATA[6906900]]></test_output>
<test_input><![CDATA[10 10]]></test_input>
<test_output><![CDATA[48620]]></test_output>
<test_input><![CDATA[10 10]]></test_input>
<test_output><![CDATA[48620]]></test_output>
<test_input><![CDATA[5 5]]></test_input>
<test_output><![CDATA[70]]></test_output>
<test_input><![CDATA[20 10]]></test_input>
<test_output><![CDATA[6906900]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[TJ-NOIP-2005]]></source>
	<solution language="C"><![CDATA[#include <stdio.h>
#include <stdlib.h>

int main (int argc, char const* argv[])
{
    int m, n, i, j;
    int a[32][32];

    scanf("%d %d", &m, &n);

    for (i = 0; i < m; i++) {
        a[i][0] = 1;
    }

    for (i = 0; i < n; i++) {
        a[0][i] = 1;
    }

    for (i = 1; i < m; i++) {
        for (j = 1; j < n; j++) {
            a[i][j] = a[i-1][j] + a[i][j-1];
        }
    }

    printf("%d\n", a[m-1][n-1]);

    return 0;
}]]></solution>
	</item>
<item>
<title><![CDATA[求两数相加的和]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>对于任意输入的位长可达100位的两个正整数，求它们的和。</p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[234 456
]]></sample_input>
<sample_output><![CDATA[690
]]></sample_output>
<test_input><![CDATA[1234567890123 999]]></test_input>
<test_output><![CDATA[1234567891122]]></test_output>
<test_input><![CDATA[1234567890 987654321]]></test_input>
<test_output><![CDATA[2222222211]]></test_output>
<test_input><![CDATA[1111111111 22222222222]]></test_input>
<test_output><![CDATA[23333333333]]></test_output>
<test_input><![CDATA[11111111111111111111 11111111111111111111]]></test_input>
<test_output><![CDATA[22222222222222222222]]></test_output>
<test_input><![CDATA[9999999999 1111111111]]></test_input>
<test_output><![CDATA[11111111110]]></test_output>
<hint><![CDATA[<p>注意:此题要求必须用文本文件输入\输出,键盘输入\屏幕输出无分</p>]]></hint>
<source><![CDATA[TJ-NOIP-2005]]></source>
	<solution language="C"><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 128

int main (int argc, char const* argv[])
{
    int len, len1, len2, i;
    int op1[MAX], op2[MAX], result[MAX];
    char buf[MAX];

    memset(op1, 0, sizeof(int) * MAX);
    memset(op2, 0, sizeof(int) * MAX);
    memset(result, 0, sizeof(int) * MAX);

    scanf("%s", buf);
    len1 = strlen(buf);
    for (i = 0; i < len1; i++) {
        op1[len1 - i - 1] = buf[i] - '0';
    }
    scanf("%s", buf);
    len2 = strlen(buf);
    for (i = 0; i < len2; i++) {
        op2[len2 - i - 1] = buf[i] - '0';
    }

    /*
    for (i = 0; i < len1; i++) {
        printf("%d", op1[i]);
    }
    printf("\n");
    for (i = 0; i < len2; i++) {
        printf("%d", op2[i]);
    }
    printf("\n");
    */

    len = len1 > len2 ? len1 : len2;
    for (i = 0; i < len; i++) {
        result[i] = op1[i] + op2[i] + result[i];
        if (result[i] >= 10) {
            result[i] %= 10;
            result[i+1] += 1; // 进位
        }
    }

    if (result[len] > 0) printf("%d", result[len]); // 最高位进位
    for (i = 0; i < len; i++) {
        printf("%d", result[len - i - 1]);
    }
    printf("\n");

    return 0;
}]]></solution>
	</item>
<item>
<title><![CDATA[约定的密码]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>林林和他的几个同学对计算机程序设计都相当有兴趣，假期临近了，他们平时商量研究的一些问题想利用假期进一步完善.因为放假他们无法天天见面，因此他们决定以电子邮件来传送每个人的研究报告，但考虑邮件在传输过程中有可能出现问题，因此商定了一组加密的方式。你作为研究组的成员之一，编程将明码破解出密码。</p>
<p>明码方式一：由四部分组成（此四部分，两两之间用一个空格隔开，以一个$为结束标志），第一部分为数字1用来表示方式1；第二部分为一个键盘符号（不包括空格和$）组成的字符串（长度不超过30个字符）；第三部分（m)、第四部分(n) 均为正整数(0&lt;m,n&lt;30),表示对于给定的字符串从第m个字符起，截取n个。然后将截得的字符串逆序输出则为密码。</p>
<p>例如： <br />
明码的键盘输入：1 abcdefghlmnopq 3 5$ <br />
密码的屏幕输出：gfedc</p>
<p>明码方式二：由三部分组成（此三部分，两两之间用空格隔开，以一个$为结束标志），第一部分为数字2表示方式2；其后为两个不超过五位长的正整数（m,n,2&lt;m&lt;n&lt;99999),求这两个数从m到n之间的所有素数（质数），并将这些素数连结成的没有空格的字符串为密码。</p>
<p>例如： <br />
明码的键盘输入：2 30 80$ <br />
密码的屏幕输出：313741434753596167717379</p>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[1 abcdefghlmnopq 3 5$
]]></sample_input>
<sample_output><![CDATA[gfedc
]]></sample_output>
<test_input><![CDATA[1 ab 2 1$ ]]></test_input>
<test_output><![CDATA[b]]></test_output>
<test_input><![CDATA[2 1 10000$]]></test_input>
<test_output><![CDATA[235711131719232931374143475359616771737983899710110310710911312713113713914915115716316717317918119119319719921122322722923323924125125726326927127728128329330731131331733133734734935335936737337938338939740140941942143143343944344945746146346747948749149950350952152354154755756356957157758759359960160761361761963164164364765365966167367768369170170971972773373974375175776176977378779780981182182382782983985385785986387788188388790791191992993794194795396797197798399199710091013101910211031103310391049105110611063106910871091109310971103110911171123112911511153116311711181118711931201121312171223122912311237124912591277127912831289129112971301130313071319132113271361136713731381139914091423142714291433143914471451145314591471148114831487148914931499151115231531154315491553155915671571157915831597160116071609161316191621162716371657166316671669169316971699170917211723173317411747175317591777178317871789180118111823183118471861186718711873187718791889190119071913193119331949195119731979198719931997199920032011201720272029203920532063206920812083208720892099211121132129213121372141214321532161217922032207221322212237223922432251226722692273228122872293229723092311233323392341234723512357237123772381238323892393239924112417242324372441244724592467247324772503252125312539254325492551255725792591259326092617262126332647265726592663267126772683268726892693269927072711271327192729273127412749275327672777278927912797280128032819283328372843285128572861287928872897290329092917292729392953295729632969297129993001301130193023303730413049306130673079308330893109311931213137316331673169318131873191320332093217322132293251325332573259327132993301330733133319332333293331334333473359336133713373338933913407341334333449345734613463346734693491349935113517352735293533353935413547355735593571358135833593360736133617362336313637364336593671367336773691369737013709371937273733373937613767376937793793379738033821382338333847385138533863387738813889390739113917391939233929393139433947396739894001400340074013401940214027404940514057407340794091409340994111412741294133413941534157415941774201421142174219422942314241424342534259426142714273428342894297432743374339434943574363437343914397440944214423444144474451445744634481448344934507451345174519452345474549456145674583459145974603462146374639464346494651465746634673467946914703472147234729473347514759478347874789479347994801481348174831486148714877488949034909491949314933493749434951495749674969497349874993499950035009501150215023503950515059507750815087509951015107511351195147515351675171517951895197520952275231523352375261527352795281529753035309532353335347535153815387539353995407541354175419543154375441544354495471547754795483550155035507551955215527553155575563556955735581559156235639564156475651565356575659566956835689569357015711571757375741574357495779578357915801580758135821582758395843584958515857586158675869587958815897590359235927593959535981598760076011602960376043604760536067607360796089609161016113612161316133614361516163617361976199620362116217622162296247625762636269627162776287629963016311631763236329633763436353635963616367637363796389639764216427644964516469647364816491652165296547655165536563656965716577658165996607661966376653665966616673667966896691670167036709671967336737676167636779678167916793680368236827682968336841685768636869687168836899690769116917694769496959696169676971697769836991699770017013701970277039704370577069707971037109712171277129715171597177718771937207721172137219722972377243724772537283729773077309732173317333734973517369739374117417743374517457745974777481748774897499750775177523752975377541754775497559756175737577758375897591760376077621763976437649766976737681768776917699770377177723772777417753775777597789779378177823782978417853786778737877787978837901790779197927793379377949795179637993800980118017803980538059806980818087808980938101811181178123814781618167817181798191820982198221823182338237824382638269827382878291829382978311831783298353836383698377838783898419842384298431844384478461846785018513852185278537853985438563857385818597859986098623862786298641864786638669867786818689869386998707871387198731873787418747875387618779878388038807881988218831883788398849886188638867888788938923892989338941895189638969897189999001900790119013902990419043904990599067909191039109912791339137915191579161917391819187919992039209922192279239924192579277928192839293931193199323933793419343934993719377939193979403941394199421943194339437943994619463946794739479949194979511952195339539954795519587960196139619962396299631964396499661967796799689969797199721973397399743974997679769978197879791980398119817982998339839985198579859987198839887990199079923992999319941994999679973
]]></test_output>
<test_input><![CDATA[2 30 80$]]></test_input>
<test_output><![CDATA[313741434753596167717379]]></test_output>
<test_input><![CDATA[1 abcdefghlmnopq 3 5$]]></test_input>
<test_output><![CDATA[gfedc]]></test_output>
<test_input><![CDATA[1 abcdefghlmnopq 1 14$]]></test_input>
<test_output><![CDATA[qponmlhgfedcba]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[TJ-NOIP-2005]]></source>
	<solution language="C"><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100000

int main (int argc, char const* argv[])
{
    int type, s, e, i, j;
    int arr[MAX];
    char str[32];

    scanf("%d", &type);
    if (type == 1) {
    /* type 1 */
        scanf("%s %d %d", str, &s, &e);
    
        for (i = s + e - 2; i >= s - 1; i--) {
            printf("%c", str[i]);
        }
        printf("\n");
    } else {
    /* type 2 */
        scanf("%d %d", &s, &e);
        memset(arr, 0, sizeof(arr));
        arr[0] = 1;
        arr[1] = 1;
        for (i = 2; i <= e; i++) {
            for (j = i * 2; j <= e; j += i) {
                arr[j] = 1;
            }
        }

        for (i = s; i <= e; i++) {
            if (arr[i] == 0) {
                printf("%d", i);
            }
        }
        printf("\n");
    }

    return 0;
}]]></solution>
	</item>
</fps>