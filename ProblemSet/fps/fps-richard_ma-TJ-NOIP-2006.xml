<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.1" url="http://code.google.com/p/freeproblemset/">
	<generator name="HUSTOJ" url="http://code.google.com/p/hustoj/"/>
	<item>
<title><![CDATA[偶数世界]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<div>假想我们生活在偶数世界里，在这个世界中只有正偶数。下面就是这个世界中数的集合:</div>
<div>Z = {2, 4, 6, 8, 10 &hellip;&hellip;}；</div>
<div></div>
<div></div>
<div>在偶数世界中，除法有它特殊的规则，如果数a能被数b整除，那么a除以b的商也一定是个偶数。例如2能整除8, 因为2 * 4 = 8。但是2却不能整除6，因为2 * 3 = 6。3是6除以2的商，但是它不是偶数。对于一个数来说，如果没有任何一个比它小的偶数能够整除它，那么它就是偶数世界中的&ldquo;质数&rdquo;。</div>
<div></div>
<div>下面是几个从小到大排列的&ldquo;质数&rdquo;：</div>
<div>2, 6, 10, 14, 18, 22, 26, 30 &hellip;&hellip;</div>
<div>现在给你n ( 2 &lt;= n &lt;= 10 ) 个偶数世界中的数, 每个数都不大于1000且没有任何两个数相同。请问在这组偶数中，是否存在两个数的和是上面所描述的&ldquo;质数&rdquo;。 如果存在不止一对数的和是&ldquo;质数&rdquo;，那么请输出那个最大的&ldquo;质数&rdquo;。如果不存在任何一对数的和为&ldquo;质数&rdquo;，则输出 -1。</div>]]></description>
<input><![CDATA[<div>每组数据的第一行为n，第二行为n个偶数世界中的数，用空格隔开。</div>
<p></p>]]></input> 
<output><![CDATA[<div>对于每组数据你只需要输出那个由任意两个数的和组成的最大&ldquo;质数&rdquo;；如果没有，则输出-1。</div>
<p></p>]]></output>
<sample_input><![CDATA[3
2 4 6]]></sample_input>
<sample_output><![CDATA[10]]></sample_output>
<test_input><![CDATA[10
788 958 888 132 214 4 872 278 558 274]]></test_input>
<test_output><![CDATA[1846]]></test_output>
<test_input><![CDATA[10
664 316 800 930 10 524 198 616 406 182]]></test_input>
<test_output><![CDATA[1730]]></test_output>
<test_input><![CDATA[5
100 548 940 916 988]]></test_input>
<test_output><![CDATA[-1]]></test_output>
<test_input><![CDATA[4
4 6 8 10]]></test_input>
<test_output><![CDATA[18]]></test_output>
<test_input><![CDATA[10
802 866 926 438 146 650 188 566 24 448]]></test_input>
<test_output><![CDATA[1374]]></test_output>
<hint><![CDATA[<div>【样例输入1】</div>
<div>3</div>
<div>2 4 6</div>
<div></div>
<div>【样例输出1】</div>
<div>10</div>
<div>（解释：2 + 4 = 6，4 + 6 = 10, 其中6和10都是&ldquo;质数&rdquo;，但是要输出最大的。）</div>
<div></div>
<div>【样例输入2】</div>
<div>3</div>
<div>2 6 10</div>
<div></div>
<div>【样例输出2】</div>
<div>-1</div>
<div>（解释：2 + 6 = 8 , 2 + 10 = 12, 6 + 10 = 16，这三个和都不是&ldquo;质数&rdquo;，所以输出-1）</div>
<p></p>]]></hint>
<source><![CDATA[TJ-NOIP-2006]]></source>
	<solution language="C"><![CDATA[#include <stdio.h>
#include <stdlib.h>

int main (int argc, char const* argv[])
{
    int i, j, k, n, t, a[16], ans, flg;

    scanf("%d", &n);
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    ans = -1;
    for (i = 0; i < n-1; i++) {
        for (j = i+1; j < n; j++) {
            t = a[i] + a[j];
            flg = 1;
            for (k = 2; k < t; k += 2) {
                if (t % (k * 2) == 0) {
                    flg = 0;
                    break;
                }
            }
            if (flg && t > ans) {
                ans = t;
            }
        }
    }

    printf("%d\n", ans);

    return 0;
}]]></solution>
	</item>
<item>
<title><![CDATA[最频繁的字母]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>小明是一名翻译，每天都要看着令人头疼的英文。他无聊时会想一些很奇怪的问题，例如英文单词是如何组成的，它们有什么来源等等。有一天他突然想，到底哪个英文字母在英文单词中出现的频率最高呢？他发现这个工作量还是很大的，于是找到了你帮助他解决这个问题。</p>
<p>他会提供你一个仅由26个小写字母(a &ndash; z)组成的字符串s（中间不含空格），请你计算一下这字符串s中哪个字母出现的次数最多，如果说出现次数最多的字母不止一个，那么请把他们都打印出来，按照字母表的顺序输出(abcdefg &hellip;&hellip; xyz)，也就是按照这些字母的ASCII由小到大输出出来。</p>
<p></p>]]></description>
<input><![CDATA[<p>每组数据都只有一行，就是题目中所描述的字符串s，它的长度不会超过200。</p>
<p></p>]]></input> 
<output><![CDATA[<p>你也只需输出一行，即出现次数最多的字母。（如果很多，就按字母表序输出）</p>
<p></p>]]></output>
<sample_input><![CDATA[abaca]]></sample_input>
<sample_output><![CDATA[a]]></sample_output>
<test_input><![CDATA[znchomnekdxcbhgbjtfmmbwpexkpzabylniyjbxjrjoajoboyzhfcmvkoalhvizdeomwxhnutliybyhqifcxafxjwyccukmllocl]]></test_input>
<test_output><![CDATA[bco]]></test_output>
<test_input><![CDATA[yptxpgequehxpxqurrksapcodbtttldiwcgkwkdqurlnhahlnhjbdeqeaommqyjshzbpgeudcrgpbdinqgeqibsilwaefhdtklgkitepwndvustrhsuzkdzucmwtaaqtlwhqigxvpiaedvbnzsfvhwrcpoavyecczepvjvqmodinujzflbksxacifgrnqhtgawwptrfh]]></test_input>
<test_output><![CDATA[dehpqt]]></test_output>
<test_input><![CDATA[azbycxdwevfugthsirjqkplomn]]></test_input>
<test_output><![CDATA[abcdefghijklmnopqrstuvwxyz]]></test_output>
<test_input><![CDATA[quickbasic]]></test_input>
<test_output><![CDATA[ci]]></test_output>
<test_input><![CDATA[tokhtojzwexrvxnwhpavsjpzyzgvholqkcmmlmnzlmyddobgbx]]></test_input>
<test_output><![CDATA[moz]]></test_output>
<hint><![CDATA[<div>【样例输入1】</div>
<div>abaca</div>
<div></div>
<div>【样例输出1】</div>
<div>a</div>
<div></div>
<div>（解释：由于a出现了3次，而b和c都只出现了1次。）</div>
<div></div>
<div>【样例输入2】</div>
<div>msmcatac</div>
<div></div>
<div>【样例输出2】</div>
<div>acm</div>
<div></div>
<div>（解释：由于m, c, a都出现了2次，只要把m, c, a按照字母表的顺序输出即可。）</div>
<p></p>]]></hint>
<source><![CDATA[TJ-NOIP-2006]]></source>
	<solution language="C"><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 26

int main (int argc, char const* argv[])
{
    int a[MAX], i, max;
    char buf[256];

    memset(a, 0, sizeof(int) * MAX);

    scanf("%s", buf);
    for (i = 0; i < strlen(buf); i++) {
        a[buf[i] - 'a']++;
    }

    max = 0;
    for (i = 0; i < MAX; i++) {
        if (max < a[i]) {
            max = a[i];
        }
    }

    for (i = 0; i < MAX; i++) {
        if (max == a[i]) {
            printf("%c", i + 'a');
        }
    }
    printf("\n");

    return 0;
}]]></solution>
	</item>
<item>
<title><![CDATA[报数游戏]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>小朋友都喜欢做游戏，今天就教大家一个游戏。游戏规则非常简单，基本描述如下：</p>
<p>假设有n个小朋友玩这个游戏，那么我们把所有的人从1到n都逐一编好号码，以便游戏的开始。n个同学根据自己的编号按照顺时针顺序站成一个圈，（以10人为例）：</p>
<p>&nbsp;现在从编号1的小朋友那开始按照顺时针的方向报数，报数的规则是，我们只做1-2报数，也就是报完1再报2，然后再报1，再报2 &hellip;&hellip; 。当有人报数报到2时，此人就输掉了游戏，必须离开，当某个人离开游戏后，大家仍然保持相对的位置继续报数，直到只有1个人剩下时才停止，这个人就是游戏的胜利者。我们（以10人为例），可以得到依次离开游戏的顺序： 2， 4， 6， 8， 10， 3， 7， 1， 9。最后胜利者为编号是5的小朋友。</p>
<p>经过几次游戏，聪明的小明感觉到了其中是有规律的，他猜测如果已知参与游戏的人数，那么这个胜利者编号就是固定的，但是他却没有计算出来到底谁会赢得游戏。现在请你来帮助小明去计算到底谁才是游戏的胜利者。</p>
<p></p>]]></description>
<input><![CDATA[<p>每组数据都会告诉你参与这个游戏的人数n，并且n不会超过1000。</p>
<p></p>]]></input> 
<output><![CDATA[<p>请你对于每组数据都输出那个胜利者的编号。</p>
<p></p>]]></output>
<sample_input><![CDATA[4]]></sample_input>
<sample_output><![CDATA[1]]></sample_output>
<test_input><![CDATA[777]]></test_input>
<test_output><![CDATA[531]]></test_output>
<test_input><![CDATA[987]]></test_input>
<test_output><![CDATA[951]]></test_output>
<test_input><![CDATA[16]]></test_input>
<test_output><![CDATA[1]]></test_output>
<test_input><![CDATA[5]]></test_input>
<test_output><![CDATA[3]]></test_output>
<test_input><![CDATA[480]]></test_input>
<test_output><![CDATA[449]]></test_output>
<hint><![CDATA[<div>【样例输入1】</div>
<div>4</div>
<div>【样例输出1】</div>
<div>1</div>
<div>（解释：离开游戏的顺序是： 2， 4， 3。 所以说剩下的编号为1的是胜利者。）</div>
<div></div>
<div>【样例输入2】</div>
<div>10</div>
<div>【样例输出2】</div>
<div>5</div>
<div>（解释：题目中已经描述。）</div>
<p></p>]]></hint>
<source><![CDATA[TJ-NOIP-2006]]></source>
	<solution language="C"><![CDATA[#include <stdio.h>
#include <stdlib.h>

int pow2 (int k)
{
    int n, i;
    
    n = 1;
    for (i = 0; i < k; i++) {
        n *= 2;
    }

    return n;
}

int main (int argc, char const* argv[])
{
    int n, i, ans, s;

    scanf("%d", &n);

    i = 0;
    while (pow2(i) <= n) {
        i++;
    }

    s = n - pow2(i - 1);

    ans = 1;
    for (i = 1; i <= s; i++) {
        ans += 2;
    }

    printf("%d\n", ans);

    return 0;
}]]></solution>
	</item>
<item>
<title><![CDATA[宝藏迷宫]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>小明被困在了一个装满宝藏的迷宫里。迷宫的结构很特殊，是一个m * n的方格，每个格子里都有宝藏，我们用一个正整数来表示宝藏的多少，整数越大表示此格子内的宝藏越多。在迷宫中，他每次只能走向他右边的格子或者下边的格子，小明非常贪心，所有走过格子里的宝藏他都会带走（包括起始点和终止点）。他开始站在左上角的格子里，最终要从右下角的格子离开迷宫，请问他最多能拿走多少宝物？</p>
<p>下面就是一个2 * 3的迷宫：</p>
<p>3<span class="Apple-tab-span" style="white-space:pre">		</span>10<span class="Apple-tab-span" style="white-space:pre">		</span>50</p>
<p>15<span class="Apple-tab-span" style="white-space:pre">		</span>12<span class="Apple-tab-span" style="white-space:pre">		</span>2</p>
<p>小明开始站在左上角，很容易看出，他最优的线路是： 右、右、下，他一路上得到的宝藏数依次为: 3, 10, 50, 2。 他如果走这条路径的话会得到65的宝藏，这也是他所有走法中获得宝藏最多的走法。</p>
<p></p>]]></description>
<input><![CDATA[<p>每组数据第一行均有两个整数（用空格隔开），分别表示m和n ( 2 &lt;= m , n &lt;= 50)，即迷宫的行数和列数。从第二行开始，输入一个m*n的矩阵（每行内的整数都用空格隔开），分别表示每个格子内部的宝藏数，保证每个格子的宝藏数不超过100。&nbsp;</p>
<p></p>]]></input> 
<output><![CDATA[<p>对于每组数据你只要输出一个整数即可，表示小明可以拿到宝藏的最大值。</p>
<p></p>]]></output>
<sample_input><![CDATA[2 3
3 10 50
15 12 2]]></sample_input>
<sample_output><![CDATA[65]]></sample_output>
<test_input><![CDATA[25 25
5 4 9 23 56 58 75 70 78 68 76 2 90 64 79 7 58 71 93 18 84 43 25 23 62
15 59 82 57 55 5 59 87 77 31 22 98 67 93 19 40 54 18 51 44 74 63 55 81 23
1 52 10 64 19 80 46 13 83 42 53 62 95 76 54 90 43 45 62 58 89 9 48 19 68
41 15 5 13 86 30 36 70 42 62 34 52 32 29 47 48 31 4 22 77 71 22 53 84 27
36 94 96 22 32 99 9 76 82 75 50 87 39 34 86 19 68 59 95 25 7 19 96 66 80
17 97 36 75 4 87 65 88 25 90 60 55 65 17 24 41 29 41 86 10 44 58 75 40 65
97 46 40 2 99 95 32 48 4 7 29 24 8 82 38 53 54 99 8 95 26 78 31 95 56
28 37 64 57 34 70 65 73 27 24 8 54 24 96 39 25 1 64 61 26 98 86 3 44 61
89 99 57 93 82 88 75 32 86 24 73 13 34 59 20 13 52 49 9 23 88 29 25 41 28
66 78 93 48 14 26 12 21 58 25 86 65 78 19 62 20 97 54 55 57 98 38 59 46 8
43 23 72 16 79 68 34 61 59 44 25 52 1 63 28 92 68 36 40 51 48 31 35 55 41
1 9 24 2 65 99 6 20 85 64 46 1 60 24 36 86 54 95 31 84 71 2 52 46 15
44 48 61 25 23 41 30 17 47 59 60 44 68 31 66 59 28 88 79 15 44 20 2 19 55
53 93 3 31 0 48 59 31 33 71 11 44 33 8 33 44 16 69 51 7 75 26 63 76 62
74 37 0 77 40 36 86 40 20 71 71 26 14 29 6 50 89 98 58 81 56 41 50 27 25
54 70 2 75 41 69 75 58 8 38 6 24 24 47 64 34 99 6 95 11 16 21 2 8 12
21 70 73 91 3 44 67 2 12 75 39 96 17 89 6 90 29 45 33 99 81 91 75 56 92
43 32 40 45 43 92 84 25 88 20 29 54 3 72 82 48 32 38 96 14 18 35 90 44 68
7 74 50 68 58 21 13 70 24 82 28 11 76 26 59 95 12 66 2 31 92 66 68 75 17
33 34 27 4 93 93 84 40 52 93 26 39 86 54 84 92 49 68 35 72 31 41 18 58 71
65 69 86 99 51 81 76 32 35 36 10 26 75 73 17 33 1 54 16 88 61 28 67 77 15
59 2 98 60 54 90 7 38 49 54 76 81 94 6 8 55 52 28 65 30 51 85 82 80 60
55 74 19 47 34 99 67 18 87 7 69 40 95 34 5 23 37 97 6 93 24 9 84 69 35
62 58 37 74 53 17 3 36 37 9 93 5 42 35 98 66 51 18 9 86 41 26 27 15 78
74 32 33 7 25 65 55 46 27 89 44 1 52 65 12 79 41 82 47 58 14 37 76 65 25]]></test_input>
<test_output><![CDATA[3256]]></test_output>
<test_input><![CDATA[50 50
16 2 99 75 3 95 94 47 16 9 47 0 47 15 48 78 65 36 1 25 95 7 41 44 43 97 53 99 70 19 33 13 90 90 30 60 57 76 7 26 11 41 8 61 93 46 64 86 14 72
97 51 14 56 58 52 37 42 44 66 69 35 41 59 75 64 41 33 60 44 97 75 70 73 22 12 40 5 6 5 30 74 98 4 26 40 39 46 40 34 8 75 11 44 16 44 40 79 52 26
35 17 57 76 32 87 59 72 63 73 28 66 10 45 14 78 74 50 58 61 33 53 91 89 68 81 74 68 9 55 32 94 78 1 73 18 87 33 70 47 3 9 81 39 74 49 70 19 43 94
22 72 88 12 84 90 91 58 4 67 29 73 63 10 30 4 70 60 51 50 22 91 15 13 16 62 97 18 79 28 56 56 35 88 0 82 26 76 33 3 52 16 73 8 79 2 67 53 68 64
33 43 65 85 89 33 51 8 48 5 59 25 14 33 68 57 54 99 11 4 93 49 71 89 5 28 62 50 8 12 56 60 64 43 62 57 93 62 1 88 50 61 20 50 89 65 91 59 61 56
10 78 72 79 42 68 76 34 42 17 45 97 16 17 66 74 61 27 69 35 82 20 19 66 17 94 92 70 71 81 22 43 11 62 81 85 79 66 98 85 66 61 80 33 70 71 84 25 26 63
62 69 38 50 97 60 85 39 79 46 12 81 61 15 86 99 73 72 28 71 72 33 61 16 87 87 32 98 56 78 33 88 62 23 85 4 10 44 46 15 11 68 78 81 25 13 19 91 8 87
67 70 58 63 73 11 46 75 20 74 74 44 78 79 97 33 31 0 14 82 67 75 56 88 2 78 54 83 46 24 81 58 10 57 3 18 61 90 14 21 49 78 58 60 69 32 39 83 57 3
54 32 68 90 21 39 82 3 45 24 51 71 68 22 64 58 48 2 1 85 18 30 30 27 14 28 66 31 63 2 37 72 98 80 81 22 59 96 79 26 18 0 35 23 50 97 73 74 56 51
17 15 64 18 13 9 9 7 42 44 85 25 12 77 37 5 54 45 25 80 26 50 84 40 12 62 15 10 77 37 84 26 49 17 61 75 73 80 65 21 55 27 34 40 91 84 23 20 19 92
84 57 81 50 12 27 79 18 91 34 84 19 8 82 53 84 27 43 90 32 31 55 74 87 6 72 12 70 62 91 56 83 8 37 5 71 25 46 85 77 12 87 66 27 31 72 33 25 54 1
40 60 42 20 24 21 8 96 49 7 51 20 30 86 8 76 59 93 76 3 88 77 25 64 27 6 45 74 78 39 74 14 63 97 26 56 71 45 53 96 4 75 81 67 15 93 68 40 66 99
69 72 38 42 44 6 39 37 35 31 54 77 61 84 3 79 5 68 5 91 28 37 83 57 62 19 72 47 54 75 17 11 3 52 57 18 93 31 70 69 41 8 82 42 62 66 65 78 85 51
57 82 30 90 53 70 62 92 14 46 27 68 34 83 99 4 23 4 74 1 88 89 62 39 27 23 63 17 87 2 34 97 46 91 58 75 81 71 78 30 95 40 66 24 40 12 36 51 95 47
88 28 30 20 87 15 7 32 61 47 42 95 77 91 70 15 89 57 69 50 26 42 25 98 17 86 55 26 15 41 45 88 18 95 58 21 96 88 20 65 91 7 99 72 94 16 44 32 75 11
48 67 13 91 58 11 4 78 99 57 31 87 61 83 49 34 5 57 56 7 45 70 61 93 28 18 24 80 32 42 3 89 50 56 40 9 68 21 56 37 56 8 33 64 50 8 44 53 72 92
31 82 13 18 57 46 63 53 95 87 14 67 73 23 39 15 94 52 42 90 45 41 78 85 64 72 66 94 69 9 17 62 70 84 70 66 1 21 70 69 29 38 50 45 91 58 11 50 56 5
15 3 46 53 49 30 21 39 45 90 32 96 74 7 17 10 75 86 25 78 83 57 67 24 52 6 66 13 26 67 97 16 41 92 79 70 49 56 28 26 5 69 18 29 66 66 3 58 40 78
2 30 0 83 80 2 80 92 21 57 13 74 78 23 19 49 38 78 26 43 96 84 79 48 83 61 88 20 53 79 89 54 43 27 19 13 58 54 74 4 14 96 30 21 51 32 1 13 20 68
28 10 98 62 51 74 58 58 66 49 78 94 30 49 70 4 3 84 49 59 26 61 81 88 2 91 91 6 51 14 0 44 68 79 25 98 21 42 80 31 59 73 51 78 87 52 8 2 12 0
94 22 77 37 95 1 22 35 99 38 17 66 92 23 88 40 98 98 2 67 60 5 55 12 67 39 64 72 59 11 74 72 57 13 13 54 8 45 44 42 98 14 63 70 16 64 2 54 24 62
56 50 19 79 10 89 79 77 17 2 67 62 49 14 57 59 8 93 39 78 58 40 69 16 2 14 69 39 48 53 4 48 97 47 17 65 80 66 63 57 50 89 12 68 29 40 75 16 80 86
21 68 82 56 15 56 28 5 55 33 4 36 94 10 19 66 53 87 85 73 50 34 16 36 16 84 6 35 42 73 99 17 57 93 74 56 69 36 18 73 81 5 9 9 41 0 0 3 35 82
45 11 1 28 81 94 46 42 68 87 55 41 15 89 92 79 17 42 15 59 65 60 0 63 70 42 17 92 63 69 12 61 77 16 63 20 30 72 4 90 40 24 29 28 30 28 9 93 95 19
96 82 43 3 35 92 25 48 83 28 51 70 72 17 99 27 41 17 96 62 3 17 40 37 5 38 91 12 5 84 91 27 80 31 78 54 87 86 77 71 27 7 54 88 46 84 60 21 98 91
62 44 94 58 89 59 47 36 66 70 76 43 23 14 60 88 8 53 59 88 98 63 92 58 79 0 35 80 9 79 55 39 55 86 69 93 8 59 10 82 99 54 65 74 70 24 48 68 55 27
32 47 88 39 43 4 14 65 87 61 60 15 56 20 25 71 98 79 47 39 74 94 86 31 85 25 80 76 87 8 90 54 62 97 15 61 40 29 27 65 16 65 27 81 0 22 99 8 87 87
56 7 77 22 75 63 59 89 33 23 38 46 33 0 40 77 79 15 30 81 74 98 85 42 21 35 48 62 20 53 48 97 18 41 8 77 58 88 48 37 74 57 89 9 51 50 3 8 44 66
53 1 55 17 56 52 85 0 15 15 50 54 74 34 48 87 90 63 43 71 55 54 77 70 51 90 30 43 26 20 10 46 39 24 54 62 38 65 33 71 74 89 64 75 92 69 60 94 29 49
58 96 25 63 55 26 92 8 37 73 58 91 74 22 73 47 40 93 10 99 4 13 56 48 86 67 72 82 33 18 89 94 43 63 41 72 48 24 5 11 20 82 90 41 62 0 69 97 91 22
29 49 74 62 82 57 56 3 91 69 47 79 63 55 55 95 97 65 97 2 74 7 43 3 87 68 72 54 59 26 8 12 22 52 15 21 31 3 99 40 35 67 10 5 63 50 32 1 54 3
76 30 38 1 55 52 21 18 94 61 71 50 68 52 58 95 35 32 4 39 81 23 96 59 34 23 92 57 28 77 22 93 23 53 30 92 50 69 67 79 58 1 20 78 69 78 80 38 70 37
29 43 59 15 38 6 27 35 47 84 13 3 81 51 8 14 70 73 73 78 81 81 18 94 78 81 21 82 5 89 24 85 21 89 69 35 99 47 97 7 11 33 41 15 82 78 1 31 68 30
84 54 57 74 68 91 78 27 50 76 93 1 1 60 89 49 28 86 98 66 84 12 97 34 10 1 90 8 73 86 99 49 60 95 60 78 95 49 8 8 34 23 7 69 69 14 64 49 70 57
53 91 92 57 0 79 74 0 5 68 24 4 85 6 59 19 33 95 22 96 79 81 96 76 52 69 29 71 35 83 13 60 25 63 62 24 49 54 96 9 70 15 85 41 79 75 55 27 58 3
35 60 28 30 44 71 75 86 79 90 81 39 19 91 17 33 60 23 56 73 60 40 33 95 58 93 56 22 3 10 55 61 89 9 46 33 65 32 97 19 84 0 7 95 38 98 37 97 92 7
60 79 94 61 55 59 74 24 81 11 10 78 89 38 68 79 86 96 33 3 77 77 77 1 5 97 65 52 39 32 24 64 89 77 78 92 64 8 61 65 9 96 62 93 32 45 56 73 87 22
35 80 52 78 20 97 94 49 79 42 77 21 58 50 65 98 8 4 67 17 19 57 21 31 30 4 59 10 69 68 50 72 39 14 30 92 75 23 82 81 74 44 51 96 24 93 98 70 60 94
9 6 73 72 88 95 98 47 90 1 92 44 63 72 65 6 26 58 37 57 71 23 93 18 98 34 56 24 20 81 62 6 9 75 17 22 3 97 1 10 51 99 35 81 5 9 14 48 64 69
98 9 46 30 28 16 65 54 85 40 60 80 54 40 28 69 12 51 54 40 89 68 39 99 15 30 13 60 0 80 42 88 17 96 58 51 55 69 6 20 71 81 29 46 28 48 34 43 14 10
80 52 62 51 65 37 76 49 82 3 56 33 97 27 20 34 77 64 62 2 46 76 78 51 4 19 57 1 2 29 84 85 49 29 66 5 7 62 63 92 97 41 99 89 8 75 30 79 63 44
89 56 87 11 33 94 81 0 95 61 12 76 76 66 19 56 98 31 53 1 86 56 33 6 87 82 93 34 3 54 5 24 56 88 73 92 62 21 79 16 16 38 90 3 12 78 4 16 38 53
0 26 55 37 91 91 38 1 80 83 59 21 43 2 4 17 52 28 25 49 11 27 38 29 97 14 78 16 40 18 14 74 84 22 44 35 59 51 42 22 2 11 54 42 80 65 47 42 78 42
44 30 12 50 63 53 72 54 32 14 92 0 71 92 48 16 27 89 52 34 45 4 35 88 5 18 5 69 90 82 18 2 44 84 75 32 9 84 24 82 89 38 79 64 31 17 9 80 43 36
74 53 37 97 90 93 66 52 33 27 82 78 42 52 13 39 83 81 78 8 8 98 1 61 10 70 40 86 58 99 32 57 55 11 96 35 59 18 18 18 69 46 57 58 27 17 8 54 77 2
85 6 82 51 83 91 21 72 20 83 60 4 30 93 80 44 77 3 40 32 14 26 44 30 29 2 60 64 11 95 21 90 26 42 78 31 21 40 35 56 77 16 90 99 72 31 60 80 52 45
99 50 32 53 11 12 29 74 65 73 79 28 38 73 85 64 5 13 94 88 1 2 65 8 25 72 28 90 61 8 77 85 16 64 89 51 82 15 68 61 12 69 61 26 73 71 21 12 11 6
50 18 26 80 58 77 21 20 2 89 7 15 56 70 76 79 66 72 88 63 12 36 6 55 7 29 29 33 48 5 15 40 1 19 39 28 7 17 37 50 88 57 15 46 41 70 2 10 38 4
89 5 36 91 98 11 3 12 35 2 94 24 50 50 92 47 27 9 48 17 10 83 55 54 57 8 68 67 96 17 52 38 71 15 0 38 6 30 60 25 38 51 1 62 16 88 33 30 3 80
65 80 47 81 99 80 28 37 53 2 63 37 50 4 35 36 80 77 62 83 94 50 51 47 26 36 23 15 1 64 35 60 58 32 33 59 52 35 16 65 64 34 85 89 75 0 16 65 0 23
]]></test_input>
<test_output><![CDATA[7116]]></test_output>
<test_input><![CDATA[3 3
1 100 1
30 10 0
60 10 1]]></test_input>
<test_output><![CDATA[122]]></test_output>
<test_input><![CDATA[3 3
1 50 1
20 1 1
100 40 1]]></test_input>
<test_output><![CDATA[162]]></test_output>
<test_input><![CDATA[10 10
10 12 68 83 45 55 18 57 62 22
65 25 22 72 98 22 68 27 38 31
14 80 79 8 59 90 3 7 73 12
14 18 71 19 47 62 17 28 41 79
90 26 28 39 46 6 11 29 48 52
59 22 18 25 26 57 96 45 9 58
9 19 26 24 16 23 97 92 59 88
89 65 25 61 99 41 49 65 98 24
9 17 64 96 76 65 77 88 87 88
72 82 94 11 82 46 38 12 83 16]]></test_input>
<test_output><![CDATA[1256]]></test_output>
<hint><![CDATA[<p>【样例输入1】</p>
<p>2 3<br />
3 10 50<br />
15 12 2</p>
<p>【样例输出1】</p>
<p>65</p>
<p>（解释：题目中已经描述。）</p>
<p></p>
<p>【样例输入2】</p>
<p>3 3<br />
2 2 2<br />
2 2 2<br />
2 2 2</p>
<p>【样例输出2】</p>
<p>10</p>
<p>（解释：无论小明采取什么样的走法，他最后得到的宝藏数都是2 * 5 = 10。）</p>
<p></p>]]></hint>
<source><![CDATA[TJ-NOIP-2006]]></source>
	<solution language="C"><![CDATA[#include <stdio.h>
#include <stdlib.h>

#define MAX 64

int main (int argc, char const* argv[])
{
    int m, n, a[MAX][MAX], i, j;

    scanf("%d %d", &m, &n);
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &a[i][j]);
        }
    }

    for (i = 1; i < n; i++) {
        a[0][i] += a[0][i-1];
    }
    for (i = 1; i < m; i++) {
        a[i][0] += a[i-1][0];
    }

    for (i = 1; i < m; i++) {
        for (j = 1; j < n; j++) {
            a[i][j] += a[i-1][j] > a[i][j-1] ?
                a[i-1][j] : a[i][j-1];
        }
    }

    printf("%d\n", a[m-1][n-1]);

    return 0;
}]]></solution>
	</item>
</fps>